---
import Layout from "@/layouts/Layout.astro";

const apiKey = import.meta.env.WEB3FORMS_API_KEY;
const apiUrl = import.meta.env.EMAIL_SERVICE;
---

<Layout id="contact" class="section">
  <form method="POST" id="form" class="grid gap-4 max-w-3xl mx-auto">
    <div class="grid md:grid-cols-2 gap-4">
      <div class="form-control">
        <input
          type="text"
          id="firstName"
          name="firstName"
          class="input input-bordered w-full input-md"
          placeholder="Ingresa tus nombres"
        />
      </div>
      <div class="form-control">
        <input
          type="text"
          id="lastName"
          name="lastName"
          class="input input-bordered w-full input-md"
          placeholder="Ingresa tus apellidos"
        />
      </div>
    </div>

    <div class="form-control">
      <input
        type="text"
        id="company"
        name="company"
        class="input input-bordered w-full input-md"
        placeholder="Ingresa el nombre de tu compañia"
      />
    </div>

    <div class="form-control">
      <input
        type="text"
        id="email"
        name="email"
        class="input input-bordered w-full input-md"
        placeholder="Ingresa tu correo electrónico"
      />
    </div>

    <div class="form-control">
      <textarea
        id="message"
        name="message"
        class="textarea w-full textarea-md textarea-bordered"
        placeholder="Ingresa tu mensaje"></textarea>
    </div>

    <input type="hidden" name="subject" value="Alguien solicita tus servicios" />
    <input type="hidden" name="from_name" value="Portfolio" />
    <input type="hidden" name="access_key" value={apiKey} />
    <input type="checkbox" name="botcheck" class="hidden" style="display: none;" />
    <div class="h-captcha" data-captcha="true"></div>

    <button type="submit" class="btn btn-primary" id="submit-button"> Enviar formulario </button>
    <div id="result" class="alert hidden w-full transition-all ease-in-out"></div>
  </form>
</Layout>

<script lang="js" type="module" define:vars={{ apiUrl }}>
  import JustValidate from "../../../../node_modules/just-validate";

  const form = document.getElementById("form");
  const result = document.getElementById("result");
  const submitButton = form?.querySelector('button[type="submit"]');
  const loaderHtml = '<span id="submit-loader" class="loading loading-spinner"></span>';

  const validator = new JustValidate("#form", {
    errorFieldCssClass: ["input-error", "textarea-error"],
    errorLabelCssClass: ["form-error-label"],
    successLabelCssClass: ["form-success-label"],
    validateBeforeSubmitting: true,
  });

  validator
    .addField(
      "#firstName",
      [
        {
          rule: "required",
          errorMessage: "Este campo es requerido",
        },
        {
          rule: "minLength",
          value: 3,
          errorMessage: "Mínimo 3 caracteres",
        },
      ],
      {
        successMessage: "Campo válido",
      }
    )
    .addField(
      "#lastName",
      [
        {
          rule: "required",
          errorMessage: "Este campo es requerido",
        },
        {
          rule: "minLength",
          value: 3,
          errorMessage: "Mínimo 3 caracteres",
        },
      ],
      {
        successMessage: "Campo válido",
      }
    )
    .addField(
      "#company",
      [
        {
          rule: "required",
          errorMessage: "Este campo es requerido",
        },
        {
          rule: "minLength",
          value: 3,
          errorMessage: "Mínimo 3 caracteres",
        },
      ],
      {
        successMessage: "Campo válido",
      }
    )
    .addField(
      "#email",
      [
        {
          rule: "required",
          errorMessage: "Este campo es requerido",
        },
        {
          rule: "email",
          errorMessage: "Ingresa un formato válido",
        },
      ],
      {
        successMessage: "Campo válido",
      }
    )
    .addField(
      "#message",
      [
        {
          rule: "required",
          errorMessage: "Este campo es requerido",
        },
        {
          rule: "minLength",
          value: 3,
          errorMessage: "Mínimo 3 caracteres",
        },
      ],
      {
        successMessage: "Campo válido",
      }
    );

  if (form) {
    form.addEventListener("submit", function (e) {
      const formData = new FormData(form);
      e.preventDefault();

      const object = Object.fromEntries(formData);
      const data = JSON.stringify(object);

      if (validator.isValid) {
        onSubmit(data, submitButton, loaderHtml, result);

        setTimeout(() => {
          result.style.display = "none";
        }, 5000);
      }
    });
  }

  const onSubmit = async (formData, submitButton, loaderHtml, result) => {
    try {
      submitButton.disabled = true;
      submitButton.insertAdjacentHTML("afterbegin", loaderHtml);

      const response = await fetch(`${apiUrl}/submit`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
        body: formData,
      });

      let json = await response.json();
      let alertClass;

      if (json.success) {
        alertClass = "alert-success";
        result.innerHTML = json.message;
      } else {
        alertClass = "alert-warning";
        result.innerHTML = json.message;
      }

      result.classList.add(alertClass);
      result.style.display = "grid";
    } catch (error) {
      result.innerHTML = "Ocurrió un error intenta mas tarde.";
      result.classList.add("alert-error");
      result.style.display = "grid";
    } finally {
      submitButton.disabled = false;
      const loader = submitButton.querySelector("#submit-loader");
      loader.remove();
      form.reset();
    }
  };
</script>
